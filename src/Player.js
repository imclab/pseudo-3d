// Generated by CoffeeScript 1.3.3
var Player;

Player = (function() {
  var movements, orientation;

  function Player(options) {
    this.setPosition(options);
  }

  movements = {
    north: {
      forward: {
        y: -1
      },
      right: {
        x: 1
      },
      back: {
        y: 1
      },
      left: {
        x: -1
      }
    },
    east: {
      forward: {
        x: 1
      },
      right: {
        y: 1
      },
      back: {
        x: -1
      },
      left: {
        y: -1
      }
    },
    south: {
      forward: {
        y: 1
      },
      right: {
        x: -1
      },
      back: {
        y: -1
      },
      left: {
        x: 1
      }
    },
    west: {
      forward: {
        x: -1
      },
      right: {
        y: -1
      },
      back: {
        x: 1
      },
      left: {
        y: 1
      }
    }
  };

  orientation = {
    north: {
      forward: 'north',
      right: 'east',
      left: 'west',
      back: 'south'
    },
    east: {
      forward: 'east',
      right: 'south',
      left: 'north',
      back: 'west'
    },
    south: {
      forward: 'south',
      right: 'west',
      left: 'east',
      back: 'north'
    },
    west: {
      forward: 'west',
      right: 'north',
      left: 'south',
      back: 'east'
    }
  };

  Player.prototype.setPosition = function(options) {
    var heading, x, y;
    options = options || {};
    x = options.x, y = options.y, heading = options.heading;
    this.x = x || this.x || 0;
    this.y = y || this.y || 0;
    this.heading = heading || this.heading || 'south';
    return this.update();
  };

  Player.prototype.offsetPosition = function(options) {
    var heading, x, y;
    options = options || {};
    x = options.x, y = options.y, heading = options.heading;
    if (x != null) {
      this.x += x;
    }
    if (y != null) {
      this.y += y;
    }
    if (heading != null) {
      this.heading = heading;
    }
    return this.update();
  };

  Player.prototype.canMoveForward = function() {
    return !this.boundaries[this.orientation.forward];
  };

  Player.prototype.canMoveBackward = function() {
    return !this.boundaries[this.orientation.back];
  };

  Player.prototype.canMoveRight = function() {
    return !this.boundaries[this.orientation.right];
  };

  Player.prototype.canMoveLeft = function() {
    return !this.boundaries[this.orientation.left];
  };

  Player.prototype.move = function(dir) {
    return this.offsetPosition(this.movement[dir]);
  };

  Player.prototype.moveForward = function() {
    if (this.canMoveForward()) {
      return this.move('forward');
    }
  };

  Player.prototype.moveBackward = function() {
    if (this.canMoveBackward()) {
      return this.move('back');
    }
  };

  Player.prototype.moveRight = function() {
    if (this.canMoveRight()) {
      return this.move('right');
    }
  };

  Player.prototype.moveLeft = function() {
    if (this.canMoveLeft()) {
      return this.move('left');
    }
  };

  Player.prototype.turn = function(dir) {
    return this.offsetPosition({
      heading: this.orientation[dir]
    });
  };

  Player.prototype.turnLeft = function() {
    return this.turn('left');
  };

  Player.prototype.turnRight = function() {
    return this.turn('right');
  };

  Player.prototype.update = function() {
    this.movement = movements[this.heading];
    this.orientation = orientation[this.heading];
    this.currentRoom = "" + this.x + ":" + this.y;
    return View.update(this);
  };

  return Player;

})();
