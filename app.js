// Generated by CoffeeScript 1.3.3
var Player, Room, Rooms, View, ViewMatrix, player, rooms;

View = (function() {

  function View() {}

  View.Pieces = (function() {

    function Pieces() {}

    Pieces.keys = ['floor', 'ceiling', 'side', 'front'];

    Pieces.floorPieces = document.getElementsByClassName('floor')[0].children;

    Pieces.ceilingPieces = document.getElementsByClassName('ceiling')[0].children;

    Pieces.sidePieces = document.getElementsByClassName('side')[0].children;

    Pieces.frontPieces = document.getElementsByClassName('front')[0].children;

    Pieces.allPieces = {
      floor: Pieces.floorPieces,
      ceiling: Pieces.ceilingPieces,
      side: Pieces.sidePieces,
      front: Pieces.frontPieces
    };

    return Pieces;

  })();

  View.Utils = (function() {

    function Utils() {}

    Utils.hide = function(e) {
      return e.style.display = 'none';
    };

    Utils.show = function(e) {
      return e.style.display = 'block';
    };

    Utils.hideGroup = function(pieces) {
      var piece, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = pieces.length; _i < _len; _i++) {
        piece = pieces[_i];
        _results.push(View.Utils.hide(piece));
      }
      return _results;
    };

    Utils.showGroup = function(pieces) {
      var piece, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = pieces.length; _i < _len; _i++) {
        piece = pieces[_i];
        _results.push(View.Utils.show(piece));
      }
      return _results;
    };

    Utils.hideAll = function() {
      var key, _i, _len, _ref, _results;
      _ref = View.Pieces.keys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(View.Utils.hideGroup(View.Pieces.allPieces[key]));
      }
      return _results;
    };

    Utils.showAll = function() {
      var key, _i, _len, _ref, _results;
      _ref = View.Pieces.keys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(View.Utils.showGroup(View.Pieces.allPieces[key]));
      }
      return _results;
    };

    return Utils;

  })();

  return View;

}).call(this);

Room = (function() {

  function Room(options) {
    this.x = options.x, this.y = options.y, this.directionLinks = options.directionLinks, this.boundary = options.boundary;
  }

  Room.prototype.position = function() {
    return "" + this.x + ":" + this.y;
  };

  return Room;

})();

Rooms = (function() {

  function Rooms(width, height) {
    var boundary, directionLinks, h, options, room, w, _i, _j, _ref, _ref1;
    this.width = width;
    this.height = height;
    this.length = (this.width + 1) * (this.height + 1);
    for (w = _i = 0, _ref = this.width; 0 <= _ref ? _i <= _ref : _i >= _ref; w = 0 <= _ref ? ++_i : --_i) {
      for (h = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; h = 0 <= _ref1 ? ++_j : --_j) {
        directionLinks = {
          north: h === 0,
          east: h === this.width,
          south: h === this.height,
          west: w === 0
        };
        boundary = directionLinks.north || directionLinks.east || directionLinks.south || directionLinks.west ? true : false;
        options = {
          x: w,
          y: h,
          directionLinks: directionLinks,
          boundary: boundary
        };
        room = new Room(options);
        this[room.position()] = room;
      }
    }
  }

  return Rooms;

})();

Player = (function() {

  function Player(options) {
    this.setPosition(options);
  }

  Player.prototype.setPosition = function(options) {
    this.x = options.x, this.y = options.y, this.heading = options.heading;
    this.x = this.x || 0;
    this.y = this.y || 0;
    this.heading = this.heading || 'south';
    return this.currentRoom = "" + this.x + ":" + this.y;
  };

  Player.prototype.offsetPosition = function(options) {
    var heading, x, y;
    x = options.x, y = options.y, heading = options.heading;
    if (x != null) {
      this.x += x;
    }
    if (y != null) {
      this.y += y;
    }
    if (heading) {
      this.heading = heading;
    }
    return this.currentRoom = "" + this.x + ":" + this.y;
  };

  return Player;

})();

ViewMatrix = (function() {

  function ViewMatrix() {}

  return ViewMatrix;

})();

player = new Player({
  x: 5
});

rooms = new Rooms(9, 9);
